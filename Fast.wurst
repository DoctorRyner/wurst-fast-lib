package Fast

import ClosureTimers

public let STUN = 851973

// Angles
public function angleBetween(unit a, unit b) returns real
    return RADTODEG * Atan2(b.getY() - a.getY(), b.getX() - a.getX())

public function angleBetween(vec2 a, vec2 b) returns real
    return RADTODEG * Atan2(b.y - a.y, b.x - a.x)

public function angleBetween(unit a, vec2 b) returns real
    return RADTODEG * Atan2(b.y - a.getY(), b.x - a.getX())

public function angleBetween(vec2 a, unit b) returns real
    return RADTODEG * Atan2(b.getY() - a.y, b.getX() - a.x)

// Distance
public function distanceBetween(unit a, unit b) returns real
    return SquareRoot(
          ((b.getX() - a.getX()) * (b.getX() - a.getX()))
        + ((b.getY() - a.getY()) * (b.getY() - a.getY()))
    )

public function distanceBetween(vec2 a, vec2 b) returns real
    return SquareRoot(((b.x - a.x) * (b.x - a.x)) + ((b.y - a.y) * (b.y - a.y)))

public function distanceBetween(unit a, vec2 b) returns real
    return SquareRoot(((b.x - a.getX()) * (b.x - a.getX())) + ((b.y - a.getY()) * (b.y - a.getY())))

public function distanceBetween(vec2 a, unit b) returns real
    return SquareRoot(((b.getX() - a.x) * (b.getX() - a.x)) + ((b.getY() - a.y) * (b.getY() - a.y)))

// // Moving
public function moveForward(unit u, real offset)
    u.setPos(u.getPos().polarOffset(u.getFacingAngle(), offset))

public function getPosForward(unit u, real offset) returns vec2
    return u.getPos().polarOffset(u.getFacingAngle(), offset)

public function getPosToward(unit u, real offset, real faceAngle) returns vec2
    return u.getPos().polarOffset(angle(faceAngle * DEGTORAD), offset)

public function moveToward(unit u, real offset, real faceAngle)
    u.setPos(u.getPos().polarOffset(faceAngle.asAngleDegrees(), offset))

// Rooting

public function root(unit victim, real time)
    let rootPos = victim.getPos()

    doPeriodicallyTimed(0.01, time) cb ->
        if victim.isAlive()    
            victim.issueImmediateOrder("stop")
        else
            cb.stop()
        victim.setPos(rootPos)

public function rootWithEffect(unit victim, real stunDuration, string effectName)
    let stunEffect = AddSpecialEffectTarget(effectName, victim, "chest")
    let rootPos = victim.getPos()

    doPeriodicallyTimed(0.01, stunDuration) cb ->
        if victim.isAlive()    
            victim.issueImmediateOrder("stop")
        else
            cb.stop()

        victim.setPos(rootPos)
        if cb.isLast()
            stunEffect.destr()

// Stunning
public function stun(unit victim, real time)
    doPeriodicallyTimed(0.01, time) cb ->
        if victim.isAlive()    
            victim.issueImmediateOrder("stop")
        else
            cb.stop()

public function stunWithEffect(unit victim, real stunDuration, string effectName)
    let stunEffect = victim.addEffect(effectName, "chest")

    doPeriodicallyTimed(0.01, stunDuration) cb ->
        if victim.isAlive()    
            victim.issueImmediateOrder("stop")
        else
            cb.stop()
        if cb.isLast()
            stunEffect.destr()

public function stunWithEffect(unit victim, real stunDuration, string effectName, string ref)
    let stunEffect = AddSpecialEffectTarget(effectName, victim, ref)

    doPeriodicallyTimed(0.01, stunDuration) cb ->
        if victim.isAlive()    
            victim.issueImmediateOrder("stop")
        else
            cb.stop()
        if cb.isLast()
            stunEffect.destr()

public function createUnit(player p, int uId, vec2 spawnPos, real facingAngle) returns unit
    return CreateUnit(p, uId, spawnPos.x, spawnPos.y, facingAngle)

function unitFadeBody(unit unitToFade, real alpha, bool shouldRemove)
    doAfter(0.1) ->
        if alpha > 0
            unitFadeBody(unitToFade, alpha - 0.1, shouldRemove)
        else
            if shouldRemove
                unitToFade.remove()

function unitFade(unit unitToFade)
    unitFadeBody(unitToFade, 1, true)

function unitFade(unit unitToFade, bool shouldRemove)
    unitFadeBody(unitToFade, 1, shouldRemove)

public function getSpellTargetPos() returns vec2
    return vec2(GetSpellTargetX(), GetSpellTargetY())

public function getNearestAlly(vec2 selectPos, player casterOwner, real range) returns unit
    let nearestUnitsGroup = CreateGroup()..enumUnitsInRange(selectPos, range)
    for u in nearestUnitsGroup
        if not u.isAlive() or IsUnitEnemy(u, casterOwner)
            nearestUnitsGroup.removeUnit(u)

    unit nearestUnit = FirstOfGroup(nearestUnitsGroup)

    for u in nearestUnitsGroup
        if distanceBetween(selectPos, u) < distanceBetween(selectPos, nearestUnit)
            nearestUnit = u

    return nearestUnit

public function getNearestEnemy(vec2 selectPos, player casterOwner, real range) returns unit
    let nearestUnitsGroup = CreateGroup()..enumUnitsInRange(selectPos, range)
    for u in nearestUnitsGroup
        if not u.isAlive() or IsUnitAlly(u, casterOwner)
            nearestUnitsGroup.removeUnit(u)

    unit nearestUnit = FirstOfGroup(nearestUnitsGroup)

    for u in nearestUnitsGroup
        if distanceBetween(selectPos, u) < distanceBetween(selectPos, nearestUnit)
            nearestUnit = u

    return nearestUnit

public function getNearestUnit(vec2 selectPos, player casterOwner, real range) returns unit
    let nearestUnitsGroup = CreateGroup()..enumUnitsInRange(selectPos, range)
    for u in nearestUnitsGroup
        if not u.isAlive()
            nearestUnitsGroup.removeUnit(u)

    unit nearestUnit = FirstOfGroup(nearestUnitsGroup)

    for u in nearestUnitsGroup
        if distanceBetween(selectPos, u) < distanceBetween(selectPos, nearestUnit)
            nearestUnit = u

    return nearestUnit

public function getRectPos(rect area) returns vec2
    return vec2(GetRectCenterX(area), GetRectCenterY(area))